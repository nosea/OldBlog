<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | nosea's Blog]]></title>
  <link href="http://nosea.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://nosea.github.io/"/>
  <updated>2017-04-09T13:26:26+00:00</updated>
  <id>http://nosea.github.io/</id>
  <author>
    <name><![CDATA[noseawu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android的布局]]></title>
    <link href="http://nosea.github.io/blog/2012/12-19/android-layout/"/>
    <updated>2012-12-19T16:43:00+00:00</updated>
    <id>http://nosea.github.io/blog/2012/12-19/android-layout</id>
    <content type="html"><![CDATA[<p>一.关于一些属性
    android:id - 为控件指定id
    android:text - 指定控件中显示的文字，这里尽量用string.xml
    android:gravity - 指定控件中的内容的基本位置，比如居中，居右
    android:textSize - 指定控件当中的字体大小
    android:width - 指定控件的宽度
    android:height - 指定控件的高度
    android:padding<em> - 指定控件的内边距，调整内容和边框之间的距离
      也可以之用padding来用
    android:singleLine - 如果设置为真的话，则控件的内容将在同一行显示
    android:background - 设置背景色
    android:layout_margin</em> - 设置控件之间的距离 px</p>

<!-- more -->


<p>二.LinearLayout - 线性布局
    1.可以使所有的控件按照单一的方向摆放(垂直或水平)
    2. android:layout_weight属性可以设置控件所占空间比例，默认值为0
    3.android:layout_gravity属性设置控件的基本位置
三.TableLayout - 表格布局
    1.继承自LinearLayout
    2.包含很多TableRow对象，一个TableRow就是一行，每个TableRow里有多少控件，就有多少列
    3.可以使控件放在行或列中
    4.android:stretchColumns属性设置某一列为拉伸列，列顺序是从0开始
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span> encoding=<span class="ni">&amp;ldquo;</span>utf-8<span class="ni">&amp;rdquo;</span>?&gt;
</span><span class='line'><span class="nt">&lt;TableLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>    <span class="na">android:stretchColumns=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>TableRow <span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>TextView
</span><span class='line'>        android:padding=&quot;3dip&quot;
</span><span class='line'>        android:background=&quot;#aa0000&quot;
</span><span class='line'>        android:text=&quot;@string/first_column&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>TextView
</span><span class='line'>        android:padding=&quot;3dip&quot;
</span><span class='line'>        android:background=&quot;#00aa00&quot;
</span><span class='line'>        android:layout_gravity=&quot;center&quot;
</span><span class='line'>        android:text=&quot;@string/second_column&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="ni">&amp;lt;</span>TextView
</span><span class='line'>        android:padding=&quot;3dip&quot;
</span><span class='line'>        android:layout_gravity=&quot;right&quot;
</span><span class='line'>        android:background=&quot;#0000aa&quot;
</span><span class='line'>        android:text=&quot;@string/third_column&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/TableRow<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="ni">&amp;lt;</span>TableRow <span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>TextView
</span><span class='line'>        android:padding=&quot;3dip&quot;
</span><span class='line'>        android:text=&quot;@string/first_column&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>TextView
</span><span class='line'>        android:padding=&quot;3dip&quot;
</span><span class='line'>        android:gravity=&quot;right&quot;
</span><span class='line'>        android:background=&quot;#00aa00&quot;
</span><span class='line'>        android:text=&quot;@string/second_column&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/TableRow<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>TableRow <span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>TextView
</span><span class='line'>        android:padding=&quot;3dip&quot;
</span><span class='line'>        android:text=&quot;@string/first_column&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>TextView
</span><span class='line'>        android:padding=&quot;3dip&quot;
</span><span class='line'>        android:gravity=&quot;center&quot;
</span><span class='line'>        android:background=&quot;#00aa00&quot;
</span><span class='line'>        android:text=&quot;@string/second_column&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/TableRow<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/TableLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>
    1.从上面的程序结果可以看出，每行的列数不均匀时，每一列都不可越过另一列的界限
    2.android:stretchColumns最好设置，否则排列很难看</p>

<p>四.RelativeLayout - 相对布局
     android:layout_above 将该控件的底部至于给定ID的控件之上
     android:layout_below 将该控件的顶部至于给定ID的控件之下
     android:layout_toLeftOf 将该控件的右边缘和给定ID控件的左边缘对齐
     android:layout_toRightOf 将该控件的左边缘和给定ID控件的右边缘对齐</p>

<pre><code> android:layout_alignBaseline 将该控件的baseline和给定ID控件的baseline对齐
 android:layout_alignBottom 将该控件的底部边缘和给定ID控件的底部边缘对齐
 android:layout_alignLeft 将该控件的左边缘和给定ID控件的左边缘对齐
 android:layout_alignRight 将该控件的右边缘和给定ID控件的右边缘对齐

 android:layout_alignParentBottom 如果该值为true，则将该控件的底部和父控件的底部对齐
 android:layout_alignParentLeft 如果该值为true，则将该控件的左边和父控件的左边对齐
 android:layout_alignParentRight 如果该值为true，则将该控件的右边和父控件的右边对齐
 android:layout_alignParentTop 如果该值为true，则将该控件的顶部和父控件的顶部对齐

 android:layout_centerHorizontal 如果值为真，该控件被置于水平方向的中央
 android:layout_centerInParent 如果值为真，该控件被置于父控件水平方向和垂直方向的中央
 android:layout_centerVertical 如果值为真，该控件被置于垂直方向的中央
</code></pre>

<pre><code class="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:paddingLeft="16dp"
    android:paddingRight="16dp" &gt; 
    &lt;Button
        android:id="@+id/one"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="@string/strOne"/&gt;
    &lt;Button
        android:id="@+id/two"
        android:layout_below="@id/one"
        android:layout_width="100dp"
        android:layout_height="wrap_content"
        android:text="@string/strTwo"/&gt;
    &lt;Button
        android:id="@+id/three"
        android:layout_toRightOf="@id/two"
        android:layout_below="@id/one"
        android:layout_width="100dp"
        android:layout_height="wrap_content"
        android:text="@string/strThree"/&gt;
    &lt;Button
        android:id="@+id/four"
        android:layout_toRightOf="@id/three"
        android:layout_below="@id/one"
        android:layout_width="100dp"
        android:layout_height="wrap_content"
        android:text="@string/strFour"/&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>五.关于嵌套布局
    1.当嵌套多个布局文件时，比如多个LinearLayout时，注意android:layout_weight的分配
    2.当内容不同时，即使android:layout_weight一样，占用的空间也不同
    3.各种布局文件的嵌套可以实现较实用和美观的界面</p>

<p>Reference:  <br/>
<a href="http://www.marschen.com/">mars的视频教程</a> <br/>
Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activity的切换]]></title>
    <link href="http://nosea.github.io/blog/2012/12-16/switch-to-another-activity/"/>
    <updated>2012-12-16T22:02:00+00:00</updated>
    <id>http://nosea.github.io/blog/2012/12-16/switch-to-another-activity</id>
    <content type="html"><![CDATA[<p>一.同个Activity的view
    1.添加view在布局文件中添加，一般注意宽高属性
      layout_width, layout_height
      有fill_parent，wrap_content，match_parent三种
    2.每个view均可添加ID来引用
      @+id/view_name
    3.EditText显示默认编辑提示字符
      android:hint=&ldquo;@string/edit_message&rdquo;
      edit_message需在string中定义
    4.TextView显示默认字符
      android:text=&ldquo;@string/Text_message&rdquo;
      同上要在string中定义
    5.Button显示名称
      android:text=&ldquo;@string/button_name&rdquo;
      同上</p>

<!-- more -->


<p>二.操纵
    1.findViewById(int id)函数取得一个view的引用，记得强制转换
    2.TextView和Button的setText方法可以设置显示字符
    3.响应Button的点击操作
        I.定义内部类实现OnClickListener接口
        II.调用Button的setOnClickListener((OnClickListener l)函数
    4.从this Activity跳转that activity
        I.Intent intent = new Intent(this_Activity.this, that_Activity.class);
         &ndash;> android.content.Intent.Intent(Context packageContext, Class&lt;?> cls)
          或者Intent intent = new Intent();
             intent.setClass(this_Activity.this, that_Activity.class);
        II.// 使用这个Intent来启动that Activity
           this_Activity.this.startActivity(intent);  <br/>
    5.菜单
       // 当用户点击Menu这个按钮的时候，调用这个方法
       public boolean onCreateOptionsMenu(Menu menu)  重写这个方法
       调用menu的add方法
       MenuItem android.view.Menu.add(int arg0, int arg1, int arg2, int arg3)
       分别是groupId itemId order titleRes
       eg: menu.add(0, 1, 1, R.string.exit);
           menu.add(0, 2, 2, R.string.about);</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activity 生命周期]]></title>
    <link href="http://nosea.github.io/blog/2012/12-14/activity-lifecycle/"/>
    <updated>2012-12-14T12:38:00+00:00</updated>
    <id>http://nosea.github.io/blog/2012/12-14/activity-lifecycle</id>
    <content type="html"><![CDATA[<p>一.基本生命周期  <br/>
<img src="/image_tag/basic-lifecycle.png"></p>

<!-- more -->


<pre><code>关于各种状态的说明
Resumed
    In this state, the activity is in the foreground and the user can interact with it. 
    (Also sometimes referred to as the "running" state.)
Paused
    In this state, the activity is partially obscured by another activity—the other activity 
    that's in the foreground is semi-transparent or doesn't cover the entire screen. The paused 
    activity does not receive user input and cannot execute any code.
Stopped
    In this state, the activity is completely hidden and not visible to the user; it is considered 
    to be in the background. While stopped, the activity instance and all its state information 
    such as member variables is retained, but it cannot execute any code.
The other states (Created and Started) are transient and the system quickly moves from them to the 
next state by calling the next lifecycle callback method. That is, after the system calls onCreate(), 
it quickly calls onStart(), which is quickly followed by onResume().
</code></pre>

<p>二.之间的转换<br/>
<img src="/image_tag/activity_lifecycle.png">  <br/>
1.第一次运行程序时, 函数运行顺序是：
    onCreate() -> onStart() ->  onResume().  <br/>
<img src="/image_tag/launch_activity.png">  <br/>
2.程序运行时按下Back键后, 从onResume()状态：
    onPause() -> onStop() -> onDestory().  <br/>
<img src="/image_tag/press_back.png">  <br/>
3.程序运行时按下Home键后，从onResume()状态：
    onPause() -> onStop().  <br/>
<img src="/image_tag/press_home.png">  <br/>
4.按下Home键后，在菜单中运行程序或者长按Home键，从onStop()状态：
    onRestart() -> onStart() -> onResume().  <br/>
<img src="/image_tag/re_launch.png">  <br/>
5.当前Activity跳转到另外的Activity的时候(注意，是全部覆盖), 从第一个Activity的 onResume()状态：  <br/>
    First&rsquo;s onPause() -> Second&rsquo;s C-S-R -> First&rsquo;s onStop()
    如果是部分覆盖，则不调用onStop()方法
<img src="/image_tag/one-to-another.png">  <br/>
6.返回到先前的Activity时，从当前Activity的onResume()状态：  <br/>
    Second&rsquo;s onPause() -> First&rsquo;s R-S-R -> Second&rsquo;s S-D   <br/>
<img src="/image_tag/activity_reback.png">  <br/>
Reference:  <br/>
<a href="http://developer.android.com/training/basics/activity-lifecycle/index.html">官网</a>  <br/>
<a href="http://blog.csdn.net/android_tutor/article/details/5772285">两分钟彻底让你明白Android Activity生命周期(图文)!</a>   <br/>
感谢原作者！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android的用户界面]]></title>
    <link href="http://nosea.github.io/blog/2012/12-12/user-interface-of-android/"/>
    <updated>2012-12-12T11:19:00+00:00</updated>
    <id>http://nosea.github.io/blog/2012/12-12/user-interface-of-android</id>
    <content type="html"><![CDATA[<p>一.概览
        The graphical user interface for an Android app is built using a hierarchy
    of View and ViewGroup objects. View objects are usually UI widgets such as buttons
    or text fields and ViewGroup objects are invisible view containers that define how
    the child views are laid out, such as in a grid or a vertical list.
        All user interface elements in an Android app are built using View and ViewGroup
    objects. A View is an object that draws something on the screen that the user can
    interact with. A ViewGroup is an object that holds other View (and ViewGroup) objects
    in order to define the layout of the interface.
        &ndash;> 来自官方文档</p>

<!-- more -->


<p><img src="/image_tag/viewgroup.png">  <br/>
二.Activity, ViewGoup, View
    1.从API上看,ViewGroup继承View.
    2.Activity: Activity class takes care of creating a window for you in which you can
      place your UI.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android的一些基本概念]]></title>
    <link href="http://nosea.github.io/blog/2012/12-11/basic-knowledge-of-android/"/>
    <updated>2012-12-11T13:27:00+00:00</updated>
    <id>http://nosea.github.io/blog/2012/12-11/basic-knowledge-of-android</id>
    <content type="html"><![CDATA[<p>一.Android的体系架构 from: <a href="http://developer.android.com/about/versions/index.html">App Framework</a>  <br/>
<img src="/image_tag/system-architecture.jpg"></p>

<!-- more -->


<p>二.四个很重要的组件
    1.Activity
        可以看成容器，构造应用程序界面，里面可以放置各种控件。
    2.Intent
        在Activity之间或者应用程序之间传输数据
    3.Service
        提供服务，在后台运行，不可见。
    4.Content Provider
        为应用程序提供数据
三.关于在Eclipse下建立工程后的几个目录和文件
    1.src:放置源代码
    2.gen:ADT插件自动生成,DO NOT MODIFY.
    3.assets和res目录都可以放资源,但放置在res里,会在gen目录里的R.java自动生成ID.
      可以通过id来引用相应的文件.
    4.res目录:
        drawable:分别是高分辨率,低分辨率,中分辨率.
        layout:放置布局文件.
               每一个Activity都对应有一个xml布局文件,控制Activity控件布局及其属性.
        values:放置一些应用程序所需要的值.
    5.AndroidManifest.xml:整个应用程序的配置文件
        1.留意根标签的package(包名).
        2.application标签的icon和label.
        3.activity标签里的intent-filter.
            哪一个activity拥有intent-filter，应用程序启动时，就先启用哪一个activity.</p>
]]></content>
  </entry>
  
</feed>
