<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C\c++ | nosea's Blog]]></title>
  <link href="http://nosea.github.io/blog/categories/c-slash-c-plus-plus/atom.xml" rel="self"/>
  <link href="http://nosea.github.io/"/>
  <updated>2017-04-09T13:37:25+00:00</updated>
  <id>http://nosea.github.io/</id>
  <author>
    <name><![CDATA[noseawu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Boost Program Options]]></title>
    <link href="http://nosea.github.io/blog/2015/01-25/boost-program-options/"/>
    <updated>2015-01-25T18:12:00+00:00</updated>
    <id>http://nosea.github.io/blog/2015/01-25/boost-program-options</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>program_options主要用于方便的从命令行或者配置文件获取程序选项。
</code></pre>

<!--more--> 


<h1>Content</h1>

<h2>example</h2>

<pre><code class="c++">#include &lt;boost/program_options.hpp&gt;
#include &lt;iostream&gt;

namespace po =  boost::program_options;
using namespace std;

/*
 * @brief: 四个步骤
 *    1) 创建一个options_description对象
 *    2) 调用options_description对象的add_options方法
 *    3) 创建一个variables_map对象
 *    4) 调用parse_command_line函数生成basic_parsed_options
 *    4) 调用program_options的全局函数store
 *    5) 调用notify全局函数
 * @{
 */
int main(int ac, char* av[])
{
    int add_times = 10;
    po::options_description desc("Allowed options");
    desc.add_options()
        ("help", "produce help message")
        ("addtimes", po::value&lt;int&gt;(&amp;add_times)-&gt;default_value(10), "Add Times")
        ("name", po::value&lt;string&gt;(), "Your name")
        ("compression", po::value&lt;int&gt;(), "set commpresson level")
        ;

    po::variables_map vm;
    po::store(po::parse_command_line(ac, av, desc), vm);
    po::notify(vm);

    if (vm.count("help"))
    {
        cout &lt;&lt; desc &lt;&lt; "\n";
        return -1;
    }

    if (vm.count("compression"))
    {
        cout &lt;&lt; "Compression level was set to "
             &lt;&lt; vm["compression"].as&lt;int&gt;() &lt;&lt; ".\n";
    }
    else if (vm.count("name"))
    {
        cout &lt;&lt; "Your name  was set to "
             &lt;&lt; vm["name"].as&lt;string&gt;() &lt;&lt; ".\n";
    }
    else
    {
        cout &lt;&lt; "Compression level was not set.\n";
    }

    return 0;
}
</code></pre>

<h2>add_options函数</h2>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;boost/shared_ptr.hpp&gt;

namespace program_options
{
    class option_description
    {
    public:
        option_description(const char* name, const char* description):
            name_(name), description_(description) {}

        const std::string&amp; name() const {return name_;} 
        const std::string&amp; description() const {return description_;}

    private:
        std::string name_;
        std::string description_;       
    };

    class options_description;

    class options_description_easy_init
    {
    public:
        options_description_easy_init(options_description* owner):
            owner_(owner) {}

        options_description_easy_init&amp; operator()
            (const char* name, const char* descrition);

    private:
        options_description* owner_;
    };

    class options_description
    {
    public:
        void add(boost::shared_ptr&lt;option_description&gt; desc)
        {
            options_.push_back(desc);
        }

        options_description_easy_init add_option()
        {
            return options_description_easy_init(this);
        }

        friend std::ostream&amp; operator &lt;&lt; (std::ostream&amp;, options_description&amp;);

    private:
        std::vector&lt; boost::shared_ptr&lt;option_description&gt; &gt; options_;
    };

    options_description_easy_init&amp; options_description_easy_init::operator()
        (const char *name, const char *description)
    {
        boost::shared_ptr&lt;option_description&gt; item(new option_description(name, description));
        owner_-&gt;add(item);

        return *this;
    }

    std::ostream&amp; operator &lt;&lt; (std::ostream&amp; o, options_description&amp; p)
    {
        for (int i=0; i&lt;p.options_.size(); i++)
        {
            o &lt;&lt; p.options_[i]-&gt;name() &lt;&lt; ": " &lt;&lt; p.options_[i]-&gt;description() &lt;&lt; std::endl;
        }

        return o;
    }
}

int main(int argc, char* argv[])
{
    using namespace program_options;
    program_options::options_description set;
    set.add_option()
        ("--help", "help message")
        ("--version", "version message")
        ;
    std::cout &lt;&lt; set;

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[函数返回引用]]></title>
    <link href="http://nosea.github.io/blog/2015/01-24/returning-a-reference/"/>
    <updated>2015-01-24T19:26:00+00:00</updated>
    <id>http://nosea.github.io/blog/2015/01-24/returning-a-reference</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>函数返回引用
</code></pre>

<!-- more -->


<h1>Content</h1>

<pre><code>函数返回引用，返回的就是对象本身，不用再拷贝一次。
注意一点：不要返回局部变量的引用
</code></pre>

<h1>Reference</h1>

<p><a href="http://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope/6445794#6445794">can a local vairables memory be accessed outside its scope</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《C专家编程》读书笔记(三)]]></title>
    <link href="http://nosea.github.io/blog/2013/01-04/expert-c-programming-reading-notes-three/"/>
    <updated>2013-01-04T19:44:00+00:00</updated>
    <id>http://nosea.github.io/blog/2013/01-04/expert-c-programming-reading-notes-three</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>《C专家编程》第三章笔记
</code></pre>

<!--more-->


<h1>第三章 - 分析C语言的声明</h1>

<h2>3.1只有编译器才会喜欢语法</h2>

<pre><code>Kernighan和Ritchie承认 - C语言声明的语法有时会带来严重的问题
1."声明的形式和使用的形式相似"这种用法可能是C语言的独创，其他语言并没有采取这种做法。
   -- int *p[3] 和 使用*p[i]这样的表达式引用或使用指针

   C语言的声明所存在的最大问题是你无法以一种人们所习惯的自然方式从左向右阅读一个声明
     --&gt; 介个...我现在已经习惯了

   关于指向数组的指针 -- 强制转换
   char (*j)[20]; /* j是一个指向数组的指针，数组内有20个char元素*/
   j = (char (*)[20])malloc(20); /*如果去掉星号两边的括号，代码会变成非法*/

   涉及指针和const的声明可能会出现几种不同的顺序
   const int *var;
   int const *var;
   上面两种情况下，指针所指向的对象是只读的
   int *const var;   --&gt;这种情况下，指针是只读的
</code></pre>

<h2>3.2声明是如何形成的</h2>

<pre><code>1.声明器 - 所有声明的核心
  简单地说，就是标识符以及与它组合在一起的任何指针、函数括号、数组下标等。
2.不能像下面那样声明 ??????????????
  * 函数的返回值不能是函数，所以如foo()()是非法的
  * 函数的返回值不能是数组，所以如foo()[]是非法的 
  * 数组里面不能有函数，所以像foo[]()是非法的
  但是像下面这样则是合法的 ??????????
  * 函数的返回值允许是一个函数指针，如：int(*fun())();
  * 函数的返回值允许是一个指向数组的指针，如：int(*foo())[]
  * 数组里面允许有函数指针，如int(*foo[])()
  * 数组里面允许有其他数组，如常见到的int foo[][]
3.结构(struct)
  结构就是一种把一些数据项组合在一起的数据结构。其他编程语言把它称为记录(record).
  struct 结构标签(可选) --&gt;加上结构标签的目的是将来可以用struc flag 作为 struct {内容}的简写
  {
      类型  标识符;
      ....
  }变量定义(可选);

  结构中也允许存在位段，无名字段以及字对齐所需填充字段。
  struct pid_tag --&gt; 是否还记得ip的首部的定义
  {
      unsigned int inactive : 1;
      unsigned int : 1;   /* 1个位的填充 */
      unsigned int recount : 6;
      unsigned int : 0; /* 填充到下一个边界 */
      short pid_id;
      ...
  }
  注意，也可以把一个布尔标志以位而不是字符来表示。位段的类型必须是int，unsigned int
  或者signed int(或者加上限定符)
  建议结构体的声明和结构体变量的声明分开，这样更有可读性

  跟结构有关的参数传递问题
  * int型变量i跟只包含一个int型成员的结构体变量s在参数传递时的方式可能完全不同
  * 在结构中放置数组，可以把数组当作第一等级的类型，用赋值语句拷贝整个数组，以
    传值调用的方式把它传递到函数，或者把它作为函数的返回类型
    --&gt; 这里不就可以返回数组了吗
4.联合(union)
  联合在许多其他语言中被陈祚变体记录(variant record).外表与结构类似，但在内存布局上有关键区别。
  在结构中，每个成员依次存储，在联合中，所有的成员都从偏移地址零开始存储。这样，每个
  成员的位置都重叠在一起：在某一个时刻，只有一个成员真正存储于该地址。
  联合的外观同结构一样，只是用关键字union代替了struct。所以，掌握了结构，基本上也掌握了联合。
  联合一般被用来节省空间。联合也可以把同一个数据解释成两种不同的东西。
  union bit32_tag
  {
      int whole; /* 一个32位的值 */
      struct {char c0, c1, c2, c3;}byte; /* 4个8位的字节 */
  }
5.枚举(enum)
  枚举通过一种简单的途径，把一串名字与一串整型值联系在一起。
  很少有什么事情只能靠枚举来完成而用#define不能解决的，但枚举有一个优点:#define定义
  的名字一般在编译时被丢弃，而枚举名字则通常一直在调试器中可见，可以在调试代码时使用它们。
</code></pre>

<h2>3.3优先级规则</h2>

<pre><code>理解C语言声明的优先级规则
A 声明从它的名字开始读取，然后按照优先级顺序依次读取
B 优先级从高到低依次是：
  B.1 声明中被括号括起来的那部分
  B.2 后缀操作符:
      括号()表示这是一个函数，而方括号[]表示这是一个数组
  B.3 前缀操作符：星号*表示 "指向...的指针"。
C 如果const和(或)volatile关键字的后面紧跟类型说明符，那么它作用于类型说明符。在其他
  情况下，const和(或)volatile关键字作用于它左边紧邻的指针星号。

eg：char * const *(*next)();
这个声明表示"next是一个指针，它指向一个函数，该函数返回另一个指针，该指针指向一个类型
为char的常量指针"
</code></pre>

<h2>3.4通过图表分析C语言的声明</h2>

<pre><code>还是牢记上面的规则吧，关键是后缀比前缀优先级高！括号最高。
</code></pre>

<h2>3.5typedef可以成为你的朋友</h2>

<pre><code>为一种类型引入新的名字，而不是为变量分配空间。
typedef类似于宏文本替换--它并没有引入新类型，而是为现有类型取个新名字。但它们之间存在关键区别。
由于typedef看上去跟变量声明完全一样，读起来也是一样，上一节分析的技巧同样适用typedef
一般情况下，typedef用于简洁地表示指向其他东西的指针。
eg：signal函数
原型：void (*signal(int sig, void(*func)))(int);
typedef void(*ptr_to_func)(int);
则可以表示成：ptr_to_func signal(int, ptr_to_func);
/* 它表示signal是一个函数，他接受两个参数
 * 其中一个是int， 另一个是ptr_to_func, 返回值为ptr_to_func
 */
tips:
     不要在一个typedef中放入几个声明器
     千万不要把typedef嵌入到声明的中间部分。
</code></pre>

<h2>3.6typedef int x[10]和#define x int[10]的区别</h2>

<pre><code>在typedef和宏文本替换之间存在一个关键性的区别。正确思考这个问题的方法就是把typedef
看成是一种彻底"封装"的类型——在声明它之后不能再往里面增加别的东西。
它和宏的区别体现在两个方面：
1.可以用其他类型说明符对宏类型名进行扩展，但对typedef所定义的类型名却不能这样做。
  #define peach int
  unsigned peach i; /* 没有问题 */
  typedef int banana;
  unsigned banana i; /* 错误，非法 */
2.在连续几个变量的声明中，用typedef定义的类型能够保证声明中所有的变量均为同一种类型，
而用#define定义的类型则无法保证。
eg：
  #define int_ptr int *
  int_ptr chalk, cheese;
  扩展后变为:
  int * chalk, cheese;  --&gt; 两种不同的类型
</code></pre>

<h2>3.7typedef struct foo{&hellip;;}的含义</h2>

<pre><code>不要为了方便起见对结构使用typedef。这样做的惟一好处是不必写"struct",但这个关键字可以
提示一些信息，不应该被省掉。
typedef应该用在：
* 数组、结构、指针以及函数的组合类型
* 可移植类型
</code></pre>

<h2>3.8理解所有分析过程的代码段</h2>

<h2>3.9轻松一下</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《C专家编程》读书笔记(二)]]></title>
    <link href="http://nosea.github.io/blog/2013/01-02/expert-c-programming-reading-notes-two/"/>
    <updated>2013-01-02T20:04:00+00:00</updated>
    <id>http://nosea.github.io/blog/2013/01-02/expert-c-programming-reading-notes-two</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>《C专家编程》第二章笔记
</code></pre>

<!-- more -->


<h1>第2章 - 这不是bug，而是语言特性</h1>

<h2>2.1这关语言特性何事</h2>

<pre><code>1.在C语言中，存在一些含糊之处或近似含糊之处
2.若遇到malloc(strlen(str));，几乎可以断定是错误的，malloc(strlen(str)+1)才是正确的
3.一个'L'的NUL和两个'LL'的NULL
  一个'L'的NUL用于结束一个ACSII字符串
  两个'LL'的NULL用于表示什么也不指向(空指针)
</code></pre>

<h2>2.2多做之过</h2>

<pre><code>"多做之过"，就是语言中存在某些不应该存在的特性。这些特性包括容易出错的switch语句，相邻字符
串常量自动连接和缺省的全局范围
1.switch的问题
  在switch的左花括号之后，可以声明一些变量，从而进行一些局部分配
  但为这些变量加上初始值没有什么作用，因为它绝不会执行，语句从匹配表达式的case开始
  --&gt;验证了下，如果在那里初始化变量，VC下时会报错的

  switch内的标签，比如case num: 如果case写错，比如default: 写成了defauit: 是不会报错的
  --&gt;VC下验证了下，会给出警告

  由于C下const关键字并不是真正的常量，所以case后放置const修饰的变量会产生编译错误
  --&gt;VC下验证，居然没有错，但是如果用普通变量就会显示“case expression not constant”

  switch语句如果每个case语句后不加break，就会依次执行下去，这个叫“fall through”情况

  break语句是跳出最近的那层循环语句或者switch语句 - 跟if语句没有关系
2.ANSI C引入的另一个新特性是相邻的字符串常量将被自动合并成一个字符串的约定
  以前是要加反斜杠(\)
  printf("aaaa"
         "bbbb"
         "cccc");
  这样后，编译时会自动合并，除了最后一个字符串，其余每个字符串最后末尾的"\0"会被自动删除
  但是这样的特性如果放在字符串数组初始化时，漏掉逗号时，相邻字符串会合并而且没有任何提示信息
  char *name[] = {"aaaa" "bbbb", "cccc"};
  上面的name[1]其实是"aaaabbbb"
3.太多的缺省可见性
  定义C函数时，在缺省情况下函数的名字是全局可见的，可以加个extern关键字，效果一样
  但是如果想限制在文件之外不可见，则必须加static关键字
  funcition name() /*在任何地方均可见*/ -- 这种缺省的可见性被多次证明是个错误
  extern funcition name() /*在任何地方均可见*/
  static funcition name() /*在这个文件之外不可见*/
  我的确是没有习惯在函数名前面加存储类型说明符的习惯^-^
</code></pre>

<h2>2.3误做之过</h2>

<pre><code>C语言的"误做之过"就是语言中有误导性质或不适当的特性。有些跟c的简洁有关，有些则与操作符的
优先级有关
1.许多符号被"重载"而具有好几种意义 - 太简洁
  static  
        函数内部，表示该变量的值在各个调用期间一直保持延续性
        函数这一级，表示该函数只对本文件可见
  extern
        用于函数的定义，表示全局可见(属于冗余的)
        用于变量，表示它在其它地方定义
  void
        作为函数的返回类型，表示不返回任何值
        在指针声明中，表示通用指针的类型
        位于参数列表中，表示没有参数
  *
        乘法运算符
        用于指针，间接引用
        在声明中，表示指针
  &amp;
        位的AND操作符
        取地址操作符
  ()
        在函数定义中，包围形式参数表
        调用一个函数
        改变表达式的运算次序
        将值转换为其他类型(强制转换)
        定义带参数的宏
        包围sizeof操作符的操作数(如果它是类型名)
   --&gt;我觉得简洁也是一种美
2.有些运算符的优先级是错误的
  -------------------------------------------------------------------
  .的优先级高于* ，-&gt;操作符用于消除这个问题
  *p.f其实是 *(p.f)， 而不是(*p).f)
  -------------------------------------------------------------------
  []高于*
  int *ap[] 其实是int *(ap[]) 
  -------------------------------------------------------------------
  函数()高于*
  int *fp() 其实是int *(fp())
  -------------------------------------------------------------------
  还有一个关于逗号运算符的，
    int i = 1, 2;    /*逗号运算符是最右边的值，但是赋值符的优先级更高，所以为1*/
    --&gt; 因此，我觉得为避免出错，多用括号 int i = (1, 2);
  --&gt;还是不必纠结这个了，凡是有疑虑的，均用括号来解决

  有的专家建议:
     在C语言中记牢两个优先级就够了:乘法和除法先于加法和减法，涉及其他的操作符时，一律
     加上括号。
3.关于操作符的"结合性" - 在几个操作符具有相同的优先级时决定先执行哪个
  每个操作符拥有某一级别的优先级，同时也拥有左结合性或右结合性
  所有赋值符(包括符合赋值)都具有右结合性 - 也就是表达式最右边的操作最先执行
  具有左结合性的 - 如位操作符&amp;, |
</code></pre>

<h2>2.4少做之过</h2>

<pre><code>属于"少做之过"的特性就是语言应该提供但未能提供的特性
1.关于空格
  在多行用反斜杠(\)分割的时候，\后不要加空格，否则会出现错误

  关于int e = *c/ *d; --&gt; 如果/*连在一起，就是注释了，必要的空格不能少

  防止这种情况的出现
  a //*
  //*/ b     --&gt;就变成a/b了
</code></pre>

<h2>2.5轻松一下————有些特性确实就是bug</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《C专家编程》读书笔记(一)]]></title>
    <link href="http://nosea.github.io/blog/2012/12-28/expert-c-programming-reading-notes-one/"/>
    <updated>2012-12-28T12:04:00+00:00</updated>
    <id>http://nosea.github.io/blog/2012/12-28/expert-c-programming-reading-notes-one</id>
    <content type="html"><![CDATA[<h1>第1章</h1>

<h2>1.1 C语言的史前阶段</h2>

<pre><code>1.C 语言的产生源自于一个失败的项目-Multics工程.(一个巨大的操作系统)
2.Ken Thompson和Dennis Ritchie想把Thompson的“太空旅行”软件移植到不太常用的PDP-7系统上，
  为此，Thompson为PDP-7编写了一个简易的新型操作系统，整个系统用汇编编写。
  ——Brian Kernighan在1970年给它取名为UNIX.
</code></pre>

<!-- more -->


<pre><code>3.语言
  (1965-7)BCPL --&gt; (1969)B --&gt; (1971)New B --&gt; (1972-3)早期的C
  UNIX
  用PDP-7汇编语言编写 --&gt; 用PDP-11汇编语言编写 --&gt; 用C语言编写
4.确切的说，UNIX比C语言早(这就是为什么UNIX系统时间从1970年1月1日起按秒计算的)
5.汇编编写UNIX太困难，Thompson创建了B语言，B语言是无类型的
6.在编译器中，效率几乎就是一切
6.B语言不算成功，Dennis Ritchie创建的New B却获得了成功，充分验证编译器设计信条
  --&gt; 这个名字很快变成了“C”，它采用编译模式而不是解释模式
7.Thompson发明了++和--操作符
</code></pre>

<h2>1.2 C语言的早期体验</h2>

<pre><code>1.C语言引入了类型系统，每个变量在使用前必须声明
  增加类型系统的主要目的是帮助编译器设计者区分新型PDP-11机器所拥有的不同数据类型
2.C语言排斥强类型，它允许程序员可以在不同的类型之间赋值
3.C的很多其它特征也是为了方便编译器设计者而建立的(因为开始几年C的主要客户就是编译器设计者)
  * 数组下标从0开始而不是从1开始
  * C语言的基本数据类型直接与底层硬件相对应
  * auto关键字成了摆设，这个只对编译器设计者有意义
  * 表达式中的数组名可以看作是指针
  * float被自动扩展为double (在ANSI C中已不是)
  * 不允许嵌套函数
  * register关键字
</code></pre>

<h2>1.3 标准I/O库和C预处理器</h2>

<pre><code>1.C语言中，绝大多数库函数和辅助程序都需要显示调用
2.C语言原先并没有定义I/O，而是由库函数提供，可移植I/O最初由Mike Lesk编写，最初出现在1972年左右
3.C预处理器大约在这个时候被加入，它所实现的3个主要功能为:
  * 字符串替换 - 通常用于为常量提供一个符号名，类似“把所有的foo替换为baz“
  * 头文件包含 - 一般性的声明可以放到头文件中，被多源文件使用
  * 通用代码模板的扩展 - 与函数不同，宏调用所接受的参数类型可以不同，宏的实际参数只是按照
    原样输出 - 这里容易出错，尽量少用
4.Steve Bourne 在编写Unix shell时，采用C预处理器使其有显示的结束语句
  PS: 难怪有fi esac
5.宏最好只用于命名常量，并为一些适当的结构提供简洁的记法
  宏名应大写，容易与函数调用区分开
</code></pre>

<h2>1.4 K&amp;R C</h2>

<pre><code>1.20世纪70年代中期，C语言已经很接近目前的形式，更多的改进仍然存在，但只是细节
2.Steve Johnson编写了pcc这个可移植的C编译器，源码对外开放，广泛移植，形成整整一代C编译器基础
3.1978年C语言经典名著《The C Programming Language》出版，作者为Brian Kernighan 和 Dennis Ritchie
  这个版本的C语言被称为"K&amp;R"
  PS:查了下Brian Kernighan，贝尔实验室的研究员，参加了UNIX系统、C语言、AWK语言和许多其他系统的开发
</code></pre>

<h2>1.5 今日之ANSI C</h2>

<pre><code>1.20世纪80年代，C语言被业界广泛使用
2.1983年ANSI(美国国家标准化组织)成立了C语言工作小组，开始了C语言的标准化工作。
3.应当学习使用ANSI C 而不是K&amp;R C
4.
</code></pre>

<h2>1.6 它很棒, 但它符合标准吗</h2>

<pre><code>1.ANSI C定义了一些术语，用于描述某种编译器的特点
  I.unportable code(不可移植的代码):
    * implementation-defined(由编译器定义的):
      在不同的编译器中所采取的行为可能不同，但它们都是正确的
    * unspecified(未确定的):
      在某些正确的情况下的做法，标准并未明确规定应该怎么做
  II.bad code(坏代码)
    * undefined(未定义的):
      在某些不正确的情况下的做法，但标准并未规定应该怎么做
    * a constraint(约束条件)
      这是一个必须遵守的限制或要求，如果不遵守，那么程序的行为很有可能就是undefined的
  III.portable code(可移植代码)
    * strictly-conforming(严格遵循标准的):
      一个严格遵循标准的代码应该是:
      + 只使用已确定特性
      + 不突破任何由编译器实现的限制
      + 不产生任何依赖由编译器定义的或未确定的或未定义的特性的输出
    * conforming(遵循标准的):
      一个遵循标准的程序可以依赖一些某种编译器特有的不可移植的特性
2.有趣的情况
  标准规定编译器只有在违反语法规则和约束条件的情况下才产生错误信息，这意味着所有不属于约束条件的语义
  规则都可以不遵守，而且这种行为属于未定义行为，编译器可以采取任何行动，甚至不必通知你。
  eg:
  c标准头文件的中声明的标识符均保留，so, 你不能声明一个malloc()函数，因为头文件已有同名函数，但这个规定
  不是约束条件，因此可以违反，编译器甚至可以不警告你
</code></pre>

<h2>1.7 编译限制</h2>

<pre><code>对编译器编译限制做了些说明
</code></pre>

<h2>1.8 ANSI C标准的结构</h2>

<pre><code>主要分四个部分
  第4节：介绍。对术语进行介绍和定义
  第5节：环境。描述了支持C语言的系统
  第6节：C语言。标准的这部分基于Dennis Ritchie出版的《The C Reference Manual》和K&amp;R C的附录A
  第7节：C运行库。提供了一个遵循标准的编译器必须提供的库函数列表
K&amp;R C 和 ANSI C的区别 
  第1类区别：指一些新的，非常不同的，并且很重要的东西。
      原型——把形参的类型作为函数。(这是惟一属于这类区别的，方便编译器根据函数定义检查函数的用法)
      这个是ANSI C最重要的新特性
  第2类区别：ANSI C正式增加了些关键字
  第3类区别：有些语言特性仍然合法，但意思有些轻微的改变
  第4类区别：前面三类之外的所有区别
</code></pre>

<pre><code class="c eg strcpy">/*K&amp;R C*/
char *strcpy();
/*ANSI C*/
char *strcpy(char *dst, const char *src);
/*这样写也可以，但不推荐*/
char *strcpy(char *, const char *);
</code></pre>

<h2>1.9 阅读ANSI C标准，寻找乐趣和裨益</h2>

<pre><code class="c">foo(const char **p) 
{

}

main(int argc, char **argv)
{
    foo(argv);
}
/*
cc test.c 
test.c: In function ‘main’:
test.c:6:5: warning: passing argument 1 of ‘foo’ from incompatible pointer type [enabled by default]
test.c:3:1: note: expected ‘const char **’ but argument is of type ‘char **’
*/

/*
g++ test.c 
test.c: In function ‘int main(int, char**)’:
test.c:8:13: error: invalid conversion from ‘char**’ to ‘const char**’ [-fpermissive]
test.c:5:6: error:   initializing argument 1 of ‘void foo(const char**)’ [-fpermissive]
*/
</code></pre>

<p>左定值，右定向
    1.ANSI C标准中的两句话
      * 每个实参都应该具有自己的类型，这样它的值就可以赋值给与它所对应的形参类型的对象
      （该对象类型不能含有限定符）
      * 要使赋值形式合法，必须要满足下列条件之一： 两个操作数都是指向有限定符或无限定符的相容类型的指针，
      左边指针所指向的类型必须具有右边指针所指向类型的全部限定符
    2.const是一个C语言的关键字，它限定一个变量不允许被改变。
    3.const int num 和 int const num 是一样的，const只修饰其后的变量，而在类型前后没有区别
    4.char const <em>p 可以理解为char const (</em>p), 即<em>p是const的，但是p却是可变的
    5 例子：
      int const </em>p1, p2;  &ndash;> (<em>p1)和p2 不可变，但p1却是可变的
      int const </em>const p1, p2; &ndash;> p2是const，是前一个const修饰的，<em>p1也被前一个const修饰，
      而p1被后一个const修饰
      int </em>const p1, p2; &ndash;> p1是const，（<em>const p1）是整体，所以const不修饰p2。
    6.const在</em>的左边，则指针指向的变量的值不可变；在<em>的右边，则指针的指向不可变。简记为“左定值，右定向”。
    7.在c中，对于const定义的指针，不赋初值编译不报错
    8.强烈建议在初始化时说明指针的指向，防止出现野指针！
    实参char </em>s与形参const char <em>p相容，而为什么char <strong>argv与形参const char </strong>p不相容呢
    1.首先分析下为什么char </em>s与形参const char <em>p相容
      s指针指向char类型，p指针也指向char类型，只不过无法通过(</em>p)改变它的值
      const char <em>p1 = char </em>p2
      二者指向类型相同，左边指针拥有右边指针全部限定符，满足赋值条件
    2.为什么char <strong>argv与形参const char </strong>p不相容</p>

<h2>1.10 “安静的改变”究竟有多安静</h2>

<pre><code>1.算术转换
  任何类型为char或者short的操作数被转为int
  任何类型为float的操作数被转为double
  其他的为升序(即int-&gt;float-&gt;double, signed -&gt; unsigned)
</code></pre>

<h2>1.11 轻松一下——由编译器定义的Pragmas效果</h2>

<pre><code>1.Free Software Foundation(自由软件基金会)是一个独立的组织，由MIT顶级黑客Richard Stallman所创立
2.FSF最好的作品之一就是GNU C编译器系列
</code></pre>
]]></content>
  </entry>
  
</feed>
