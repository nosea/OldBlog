<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | nosea's Blog]]></title>
  <link href="http://nosea.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://nosea.github.io/"/>
  <updated>2017-04-09T13:26:26+00:00</updated>
  <id>http://nosea.github.io/</id>
  <author>
    <name><![CDATA[noseawu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux命令tcpdump]]></title>
    <link href="http://nosea.github.io/blog/2015/01-06/linux-command-tcpdump/"/>
    <updated>2015-01-06T17:41:00+00:00</updated>
    <id>http://nosea.github.io/blog/2015/01-06/linux-command-tcpdump</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>tcpdump命令日常使用
</code></pre>

<!--more-->


<h1>OPTION</h1>

<pre><code>-i     Listen on interface.
$ sudo tcpdump -ieth0  // 监听eth0上所有的包
22:26:20.775096 IP NOSEA-PC.1600 &gt; 192.168.14.16.41732: . ack 98 win 271 ...省略

-c     Exit after receiving count packets.

$ sudo tcpdump -ieth0 -c 10   // 监听eth0上收到的10个包
22:26:20.775096 IP NOSEA-PC.1600 &gt; 192.168.14.16.41732: . ack 98 win 271 ...省略
下面只显示抓到的10个包

-n     Don't  convert  addresses  (i.e.,  host addresses, port numbers,
       etc.) to names.
       如果不使用-n选项，那么ip会被转变为主机名，端口会被转为相应的服务，如port 22
       会被转换为ftp。
$ sudo tcpdump -ieth0 -c 10   
22:26:20.775096 IP NOSEA-PC.1600 &gt; 192.168.14.16.41732: . ack 98 win 271 ...省略

$ sudo tcpdump -ieth0  -n -c 10   // 不要把地址转换为主机名，不要把端口转换为服务名
22:26:20.775096 IP 192.168.14.17.1600 &gt; 192.168.14.16.41732: . ack 98 win 271 ...省略

-X     When parsing and printing, in addition to printing  the  headers
       of  each  packet,  print the data of each packet (minus its link
       level header)  in  hex  and  ASCII.   This  is  very  handy  for
       analysing new protocols.
       打印了包头和包得内容，对于协议的分析很有用。
$ sudo tcpdump -ieth0 -X -n -c 10

-e     Print  the  link-level  header  on  each dump line.  This can be
       used, for example, to print MAC layer  addresses  for  protocols
       such as Ethernet and IEEE 802.11.
       之前是只有IP的信息，这个会打印链路层的信息，对于查看mac地址挺有用
$ sudo tcpdump -ieth0 -enX -c10

-l     Make stdout line buffered.  Useful if you want to see  the  data
       while capturing it. 
       让标准输出行缓冲后，可以用pipe针对每行做处理，在想实时的看到dump到
       packet时很有用。比如
       tcpdump -l | tee dat
       tcpdump -l &gt; dat &amp; tail -f data
$ sudo tcpdump -ieth0 -enX -c10

-v     When  parsing and printing, produce (slightly more) verbose out-
       put.  For example,  the  time  to  live,  identification,  total
       length  and  options  in an IP packet are printed.  Also enables
       additional packet integrity checks such as verifying the IP  and
       ICMP header checksum.
       -v和-vv都是打印更多的详细的信息，需要时再用吧
$ sudo tcpdump -ieth0 -enX -c10

-w     Write  the  raw packets to file rather than parsing and printing
       them out.  They can later be printed with the -r option.   Stan-
       dard output is used if file is ``-''.

       This  output will be buffered if written to a file or pipe, so a
       program reading from the file or pipe may not see packets for an
       arbitrary  amount  of  time after they are received.  Use the -U
       flag to cause  packets  to  be  written  as  soon  as  they  are
       received.
       注意，保存到文件里的是raw packets是原始的dump数据，没有经过分析的
       二进制数据。如果要读这些包文件的话，用-r选项。另外，即使在保存到
       文件的时候，用了一些匹配选项，保存的也是最原始的日志.
$ sudo tcpdump -ieth0  -c10 -w dump.data
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
10 packets captured
22 packets received by filter
0 packets dropped by kernel

-r     Read  packets  from file (which was created with the -w option).
       Standard input is used if file is ``-''.
$ sudo tcpdump -ieth0 -elnX -c10 -rdump.data

-p     Don't  put  the  interface into promiscuous mode.  Note that the
       interface might be in promiscuous mode for  some  other  reason;
       hence,  `-p'  cannot  be used as an abbreviation for `ether host
       {local-hw-addr} or ether broadcast'.
       不要把网卡置于混杂模式

-s     Snarf snaplen bytes of data from each  packet  rather  than  the
       default  of 65535 bytes.  Packets truncated because of a limited
       snapshot are indicated in the output  with  ``[|proto]'',  where
       proto  is the name of the protocol level at which the truncation
       has occurred.  Note that taking larger snapshots both  increases
       the amount of time it takes to process packets and, effectively,
       decreases the amount of packet buffering.  This may cause  pack-
       ets to be lost.  You should limit snaplen to the smallest number
       that will capture the protocol information you're interested in.
       Setting  snaplen to 0 sets it to the default of 65535, for back-
       wards compatibility with recent older versions of tcpdump.

       -s0 用以抓取65535字节的包
</code></pre>

<h1>expression</h1>

<pre><code>The filter expression consists of one or more  primitives.   Primitives
usually consist of an id (name or number) preceded by one or more qual-
ifiers.  There are three different kinds of qualifier: type, dir, proto

表达式用于过滤要dump的packets。理解了awk得过滤，这个也差不多。
详见 man 7 pcap-filter。

格式：tcpdump -elnX -c 10 'expression'
expression的格式为：qualifier id(id是一个数字或者名字).
</code></pre>

<h2>qualifiers</h2>

<h3>type</h3>

<pre><code>type qualifiers say what kind of thing the  id  name  or  number
refers  to. 通常的types是host(主机), net(网络), port(端口)和portrange(连续的端口)

// dump与192.168.9.73的包
$ sudo tcpdump -enl -c10 'host 192.168.9.73'

// 在上面的基础上，加上端口为10001的限制
$ sudo tcpdump -enl -c10 'host 192.168.9.73 and port 10001'
</code></pre>

<h3>dir</h3>

<pre><code>dir qualifiers specify a particular transfer direction to and/or
from id
指定方向了，这个相当有用，常用的就是src, dst了

// dump来自192.168.9.73的包，并且目标的端口是10001
$ sudo tcpdump -enl -c10 'src host 192.168.9.73 and dst port 10001'

// dump来自192.168.9.73的包，并且目标的端口是10001到10100之间的包
$ sudo tcpdump -enl -c10 'src host 192.168.9.73 and dst portrange 10001'
</code></pre>

<h3>proto</h3>

<pre><code>proto qualifiers restrict the match to  a  particular  protocol.
Possible  protos are: ether, fddi, tr, wlan, ip, ip6, arp, rarp,
decnet, tcp and udp.
估计常用到的就是tcp和udp了。。

// dump来自192.168.9.73的包，并且目标的端口是10001的tcp包
$ sudo tcpdump -enl -c10 'tcp and src host 192.168.9.73 and dst port 10001'
</code></pre>

<h3>其他常用的</h3>

<pre><code>In addition to the above, there are some special  `primitive'  keywords
that  don't  follow  the pattern: gateway, broadcast, less, greater and
arithmetic expressions.  All of these are described below.jjjjkkkk

less length
    True  if  the  packet has a length less than or equal to length.
    This is equivalent to:
    len &lt;= length.

// dump来自192.168.9.73的tcp包，且包大小小于100，greater的用法一样
// 注意，用-v选项才可以看到包的大小，如果想看的话
$ sudo tcpdump -nlv -c10 'tcp and src host 192.168.9.73 and less 100'
</code></pre>

<h1>Reference</h1>

<p>man tcpdump  <br/>
<a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html">Linux tcpdump命令详解</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令xargs]]></title>
    <link href="http://nosea.github.io/blog/2013/11-21/linux-command-xargs/"/>
    <updated>2013-11-21T22:32:00+00:00</updated>
    <id>http://nosea.github.io/blog/2013/11-21/linux-command-xargs</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>xargs - build and execute command lines from standard input
</code></pre>

<!--more-->


<h1>Content</h1>

<pre><code>如果需要将上一条命令的标准输出作为参数传给下一条命令，简单的话可以使用这个
它默认对输出的分割依据是blanks，可以指定其他的参数
command_1 | xargs command_2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令iptables]]></title>
    <link href="http://nosea.github.io/blog/2013/11-13/linux-command-iptables/"/>
    <updated>2013-11-13T17:08:00+00:00</updated>
    <id>http://nosea.github.io/blog/2013/11-13/linux-command-iptables</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>iptables — administration tool for IPv4 packet filtering and NAT
</code></pre>

<!--more--> 


<h1>总览</h1>

<h2>表和链</h2>

<pre><code>目前有四个表和五条链
表 —— 表包含一系列内置的链，也可以包含用户自定义的链
链 —— 每条链都是一张可以匹配报文的规则清单，每条规则说明了对匹配到的报文做何种处理
</code></pre>

<p><img src="/image_tag/linux/iptables_tables_and_chains.png"></p>

<h3>mangle表</h3>

<pre><code>用来修改数据包，
target —— TOS、TTL、MARK、SECMARK、CONNSECMARK
注意：不要做数据包的过滤之类的操作
TOS —— 修改报文的服务类型(Type of Service)，这个主要用来设置报文如何被路由之类的策略
       但是这个实现的并不好，网络中的很多路由器并不处理这个字段的值

TTL —— Time To Live，当通过一台机器共享网络时，转发的报文的TTL实际是各种各样的，运营商
       会通过这个来判断你是否共享网络，为了避免被发现，可以设置统一的TTL值

MARK —— 给报文设置指定的标记值，iproute2能够识别报文的这些值来做出不同的路由策略
        同时也可以根据这个来做带宽限制和Class Based Queuing

SECMARK —— 可以给单个报文设置安全的上下文标记，这些标记可以被SELinux和其他安全系统处理
           SECMARK和CONNSECMARK合用可以用来设置整个连接
CONNSECMARK —— 可以用来拷贝单个报文的上下文标记给整个连接或者相反，然后供SELinux和其他安全系统
        处理
</code></pre>

<h3>nat表</h3>

<p><img src="/image_tag/linux/iptables_nat.png">
    只用来NAT
    target —— DNAT、SNAT、MASQUERADE、REDIRECT
    DNAT —— 当你只有一个公网IP时，想通过防火墙重导向到其他内网机器，即改变报文的目的地址并路由到指定的内网服务器
    SNAT —— 用来改变报文的源地址，与DNAT相反，隐藏本地的网络结构，共享上网，统一出口之类的
    MASQUERADE —— 跟SNAT一样，区别是使用这个机器负载高点，好处是当公网IP是不固定的，比如dhclient获得的之类的，那么
                  对于每个匹配的包，MASQUERADE都会去查找可用的IP，而不是指定的</p>

<h3>raw表</h3>

<pre><code>主要用来做一件事情，就是对报文设置一个标记来告诉连接跟踪系统不对这个报文做处理
target —— NOTRACK
</code></pre>

<h3>filter表</h3>

<pre><code>用来过滤数据包
target —— ACCEPT、DROP
</code></pre>

<h2>packet经过流程</h2>

<pre><code>PREROUTING链 —— 对报文做路由选择前应用这个链的规则，即进来的报文都先经过这个链处理
POSTROUTING链 —— 所有报文出去之前应用这个链的规则
INPUT链 —— 到本地应用程序之前应用这个链的所有规则
OUTPUT链 —— 出了应用程序后应用这个链的所有规则
FORWARD链 —— 本机转发的包应用这个链的所有规则
</code></pre>

<p><img src="/image_tag/linux/iptables_map.png"></p>

<h1>用法</h1>

<h2>总览</h2>

<pre><code>说明: 如果没有指定-t 选项，即没有指定表名，默认的操作表为filter表
######################################################
iptables [-t table] command [match] [target/jump]
######################################################
iptables [-t table] {-A|-C|-D} chain rule-specification
iptables [-t table] -I chain [rulenum] rule-specification
iptables [-t table] -R chain rulenum rule-specification
iptables [-t table] -D chain rulenum
iptables [-t table] -S [chain [rulenum]]
iptables [-t table] {-F|-L|-Z} [chain [rulenum]] [options...]
iptables [-t table] -N chain
iptables [-t table] -X [chain]
iptables [-t table] -P chain target
iptables [-t table] -E old-chain-name new-chain-name
rule-specification = [matches...] [target]
match = -m matchname [per-match-options]
target = -j targetname [per-target-options]
</code></pre>

<h2>command</h2>

<pre><code>-A, --append chain rule-specification
    在链尾追加一条规则
      eg: 在filter表INPUT链尾加一条规则
      iptables -A INPUT --dport 80 -j ACCEPT

-C, --check chain rule-specification

-D, --delete chain rule-specification
    删除链里面指定的一条规则，这个是通过输出完整的规则来删除
      eg: 删除filter表INPUT链里为'-p udp --dport 8000 -j ACCEPT'的规则
      iptables -D INPUT -p udp --dport 8000 -j ACCEPT

-D, --delete chain rulenum
    删除链里面指定的一条规则，这个是通过指定规则序号删除，序号1代表第一条规则
      eg: 删除filter表里INPUT链的第一条规则
      iptables -D INPUT 1

-I, --insert chain [rulenum] rule-specification
    在链里插入一条规则，rulenum指明插入的位置，如果没有给出，默认值为1
      eg: 在filter表INPUT链的第二个位置插入一条规则
      iptables -I INPUT 2 --dport 443 -j DROP

-R, --replace chain rulenum rule-specification
    替换指定rulenum的规则
      eg: 替换filter表INPUT链的第二个规则
      iptables -R INPUT 2 --dport 443 -j ACCEPT

-L, --list [chain]
    列出指定链的规则，不指定的话，则列出所有链的规则，常配合n和v选项使用
      eg: iptables -nvL

-S, --list-rules [chain]
    以iptables-save的格式打印指定链的规则，不指定链的话，则打印所有的

-F, --flush [chain]
    清空指定链的规则，如果不指定链的话，则清空所有规则，它相比逐条删除更快
      eg: 清空INPUT链的所有规则
      iptables -F INPUT

-Z, --zero [chain [rulenum]]
    清空指定链指定序号的规则的包传输统计值，就是通过这个规则的流量，不指定的话，清空所有规则的统计值

-N, --new-chain chain
    在指定的表上创建一个新的链(名字不能与内置的链同名)
    eg: 在filter表上创建一个链
    iptables -N TEST_CHAIN

-X, --delete-chain [chain]
    删除指定表的指定用户链(注意，只能删除用户自定义的链)，如果不指定链名，会删除指定表上所有用户
    自定义链，另外，要删除的链必须是空链，即不能含有任何规则，否则无法删除
    eg: 删除filter表上的TEST_CHANIN链
    iptables -X TEST_CHAIN

-P, --policy chain target
    为内置的链设置默认的规则(ACCEPT DROP)，所有不符合规则的报文都使用这个规则，注意，内置的链和用户自定
    义的链都不能作为target，即不能出现类似这种：
    iptables -P INPUT OUTPUT或 iptables -P INPUT TEST_CHAIN

    eg: 设置filter表INPUT链默认为DROP
    iptables -P INPUT DROP

-E, --rename-chain old-chain new-chain
    修改链名

-h    Help
</code></pre>

<h2>match</h2>

<pre><code>指定了表和链，下面就要开始匹配经过这条链的每个数据包，匹配的结果无非是true或者false，true即执
行后面的target或jumpfalse则执行下一条规则
可以把所有的匹配选项分为5个子类：
generic matches —— 可以用于所有的规则
TCP matches —— 只能用于TCP包
UDP matches —— 只能用于UDP包
ICMP matches —— 只能用于ICMP包
special matches —— 一些特殊的匹配
</code></pre>

<h3>generic matches</h3>

<pre><code> -p, --protocol [!] protocol
   1) protocol可以是"tcp"、"udp"、"icmp"或者"all"或者其相依的数值，具体数值可以参考/etc/protocols
   2) /etc/protocols里的其他协议也可以使用
   3) 协议名前可选的"!"为取反，比如 -p ! tcp 代表除tcp之外的协议
   4) 数值0等同于"all"
   5) "all"代表所有协议，并且当-p选项省略时，"all"为默认值
   eg:
     iptables -A INPUT -p tcp

-s, --source [!] address[/mask]
  用来匹配包的源ip地址，可以是单个ip地址，也可以附加CIDR表示网络，"!"表示取反。默认是匹配全部的ip地址
  eg:
     1、单个ip地址
       iptables -A INPUT -p tcp -s 192.168.1.9 
        等同于
        iptables -A INPUT -p tcp -s 192.168.1.9/255.255.255.255
        等同于
        iptables -A INPUT -p tcp -s 192.168.1.9/32
     2、网络
      iptables -A INPUT -p tcp -s 192.168.1.0/24 ## 这个会匹配所有来自192.168.0.x的包

-d, --destination [!] address[/mask]
  用来匹配包的目的ip地址，跟-s相同的语法

-i, --in-interface [!] name
  用来匹配包入口的网络接口。这个选项只用于INPUT、FORWARD和PREROUTING三个链，用于其他链会返回错误
  注意:
    1) 接口可以物理网卡如eth0，也可以是其他如PPP0,或虚拟网卡
    2) 如果不指定具体的interface，那么会默认以"+"代替所有的interface，另外"eth+"也可以通配
       所有以eth开头的，如eth1、eth2...
    3) "!"为取反，如 "! eth0" 表示出eth0之外的所有包

-o, --out-interface [!] name
  用来匹配包的出口接口，用法同"-i"，这个选项只用于OUTPUT, FORWARD 和 POSTROUTING链

[!]  -f, --fragment
  用来匹配被分片的包的第二和第三部分，因为包头在第一部分，源地址和目的地址，端口等都无法知道，
  上述规则无法匹配，所以才有了这个匹配。注意"! -f"只匹配第一个分片或者不分片的包。为了防止碎片攻击
  可以使用这个，但是目前的内核有很好的碎片重组功能可以使用，所以不需要取反来防止碎片攻击。
  如果使用连接跟踪选项的话，就不会看到任何分片包，因为在抵达任何链之前包就被处理了
</code></pre>

<h3>Implicit matches</h3>

<pre><code>iptables可以使用扩展的包匹配模块，必须导入才能使用，导入有两种方法，一种的隐式的导入，当-p 或者
--protocol指定了协议类型时，另一种是显式的使用-m 或者 --match选项后面紧跟匹配模块名的方式
</code></pre>

<h4>TCP matches</h4>

<pre><code>下面的选项只有在使用了"--protocol tcp"才有效
--sport, --source-port [!] port[:port]
  匹配TCP包源端口
  注意:
   1) 不用此选项，则匹配所有端口
   2) port1:port2表示连续端口，如"7000:8000"表示7000到8000端口
   3) 省略第一个port时，默认为0，如 ":22"表示0到22端口
   4) 省略第二个port时，默认为65535，如"22:"表示22到65535端口
   5) "!"取反

--dport, --destination-port [!] port[:port]
  匹配包的目的端口，用法同源端口

--tcp-flags [!] mask comp
  匹配TCP的flag。flag可以是: SYN ACK FIN RST URG PSH ALL NONE
  有两个参数，mask和comp，每个参数都是一个list，里面的内容以逗号隔开，参数之间以空格隔开。
  mask表示要检查的flags有哪些，而comp则说明哪些flag需要被设置
  eg: 匹配SYN被设置，而ACK, FIN 和 RST没有被设置的包
    iptables -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST SYN
</code></pre>

<h4>UDP matches</h4>

<pre><code>下面的选项只有使用了"--protocol udp"才有效
--source-port [!] port[:port]
  使用方法同TCP
--destination-port [!] port[:port]
  使用方法同TCP
</code></pre>

<h4>ICMP matches</h4>

<pre><code>下面的选项只有使用了"--protocol icmp"才有效
  --icmp-type [!] typename
    根据ICMP的类型来匹配包，可以是ICMP类型名，也可以是相对应的类型值。
    ICMP的类型名可以参考如下命令: iptables -p icmp -h
    eg: 匹配ICMP类型8的包
      iptables -A INPUT -p icmp --icmp-type 8
</code></pre>

<h4>SCTP matches</h4>

<pre><code>SCTP(Stream Control Transmission Protocol), 一个较新的协议
当指定了"-p sctp" 或者 "--protocol sctp"时，其所属的matches自动被加载
  --source-port,--sport [!] port[:port]
    匹配SCTP报文头的源端口，使用方法同TCP的
  --destination-port,--dport [!] port[:port]
    匹配SCTP报文头的目的端口，使用方法同TCP的
  --chunk-types [!] {all|any|only} chunktype[:flags] [...]
</code></pre>

<h3>Explicit matches</h3>

<pre><code>pass
</code></pre>

<h2>target/jump</h2>

<pre><code>target/jumps指明了当包匹配上了后应该做何种动作
-j, --jump target/chain
指定要执行的动作，或是跳转到其他链，或是ACCEPT之类的

ACCEPT 
  说明 —— 这个target用来让报文通过
  选项 —— 无
  eg: 让80端口的tcp包通过
    iptables -A INPUT -p tcp --sport 80 -j ACCEPT

DNAT
  说明 —— 做目的地址转换，因此需要重写目的IP地址，一旦匹配，所有的包都会被转换，然后路由到正确的设备
  注意 —— DNAT只在nat表的PREROUTING 和 OUTPUT链中有效，或是从这两条链跳转的任何用户自定义链
  选项:
    --to-destination ipaddr[-ipaddr][:port-port]
      重写ip头的地址，可以是单个ip也可以是一个ip段，如果是ip段的话，会把匹配的包随机分配到这些ip中
  eg:
    iptables -t nat -A PREROUTING -d 15.45.23.67 -j DNAT --to-destination 192.168.1.1-192.168.1.10
      把目的地址为 15.45.23.67 的包发往后面的ip段。单个流会始终分配到同一个ip。
    iptables -t nat -A PREROUTING -d 15.45.23.67 -j DNAT --to-destination 192.168.1.2
      指定单个ip
    iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 -j DNAT --to-destination 192.168.1.2:22-443
      指定目的端口，注意，要使用端口，必须指定"--protocol"选项

DROP: 将报文丢弃掉，不会向发送者返回任何信息

MASQUERADE: 同SNAT，但是不需要--to-source选项

REJECT: 将报文丢弃掉，但会向发送者返回一个错误信息

SNAT:
  说明 —— 做源地址转换，因此需要重写源IP地址，常用来共享IP地址。使用这个功能时，首先要在内核里打开IP
          转发功能
  注意 —— SNAT只在nat表里的POSTROUTING链里有效，另外当同一个连接的第一个包被匹配到后，其余的包自动被
          转发
  选项:
    --to-source [ipaddr[-ipaddr]][:port[-port]]
       指定源地址和端口
  eg:
</code></pre>

<h1>实例</h1>

<h2>共享网络</h2>

<pre><code>linux主机当nat服务器，有多个网卡，其中一个网卡接公网ip，其他的接私网。
其中接出来的私网接入路由器，由路由器分配ip。路由器接入交换机，使台式机可以通过有线上网。
笔记本可以直接通过无线上网。
</code></pre>

<pre><code class="bash">#!/bin/bash
/etc/init.d/network-manager stop
killall -9 dhclient
#开启ip转发功能
echo 1 &gt;/proc/sys/net/ipv4/ip_forward
iptables -F
iptables -t nat -F
#此处的eth*要改成你的公网ip的接口,而-s后面的ip是人为设定的转发网段的ip。
iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth* -j MASQUERADE
iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth* -j MASQUERADE
#设置公网ip和子网掩码
ifconfig eth4 10.75.224.2 netmask 255.255.255.128
#添加默认网关
route add default gw 10.75.224.1
#设置转发的ip
ifconfig eth$ 192.168.0.1
ifconfig eth$ 192.168.1.1
iptables-save 
</code></pre>

<h1>Reference</h1>

<p><a href="https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html">Iptables Tutorial 1.2.2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令vmstat]]></title>
    <link href="http://nosea.github.io/blog/2013/11-10/linux-command-vmstat/"/>
    <updated>2013-11-10T10:38:00+00:00</updated>
    <id>http://nosea.github.io/blog/2013/11-10/linux-command-vmstat</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>vmstat上报关于进程、内存、内存分页、阻塞IO、traps、CPU活动信息
</code></pre>

<!--more--> 


<h1>说明</h1>

<pre><code>不带参数直接运行默认显示如下
==============================================================
procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
1  0      0 2591380  98044 645864    0    0    35    14  221  391  4  1 94  1
==============================================================  
procs:
  r —— 正在等待运行的进程数量
  b —— 进程处在不可中断睡眠状态的数量
memory:
  swpd —— 虚拟内存使用总量
  free —— 空闲内存总量
  buff —— 内存用作buffer的总量
  cache —— 内存用作cache的总量
  +++++++下面的用-a选项可以显示++++++
  inact —— 非活动内存总量
  active —— 活动内存总量
swap:
  si —— 每秒从交换分区写入内存的总量
  so —— 每秒从内存写入交换分区的总量
io:
  bi —— 块设备每秒接收块的总量
  bo —— 块设备每秒发送块的总量
system:
  in —— 每秒的中断数量，包括时钟中断
  cs —— 每秒的上下文切换数量
CPU:
  us —— 用户CPU时间占比(include nice time)
  sy —— 系统CPU时间占比
  id —— 空闲CPU时间占比
  wa —— IO阻塞CPU时间占比
  st —— 虚拟机CPU时间占比
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令top]]></title>
    <link href="http://nosea.github.io/blog/2013/11-09/linux-command-top/"/>
    <updated>2013-11-09T16:29:00+00:00</updated>
    <id>http://nosea.github.io/blog/2013/11-09/linux-command-top</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<pre><code>top -- display Linux tasks
</code></pre>

<!--more-->


<h1>说明</h1>

<pre><code>以光标为界分为两个部分，上面是显示的系统有关的整体性能信息的Summary Area
下面显示的是各个进程的相关信息的Task Area。光标处用于输入命令
</code></pre>

<h2>Summary Area</h2>

<pre><code>eg:
=============================================================================
top - 19:44:55 up 31 min,  6 users,  load average: 0.92, 0.62, 0.52
Tasks: 200 total,   1 running, 198 sleeping,   0 stopped,   1 zombie
Cpu(s):  5.5%us,  2.1%sy,  0.0%ni, 91.7%id,  0.6%wa,  0.0%hi,  0.1%si,  0.0%st
Mem:   4099360k total,  1377388k used,  2721972k free,    57820k buffers
Swap:  2097148k total,        0k used,  2097148k free,   582564k cached
=============================================================================
  第一行 —— 等同于uptime命令
     系统当前时间
     系统运行时间
     当前登录用户数
     系统负载
  第二行 —— 进程概览
     总进程数
     正在运行的进程数
     正在睡眠的进程数
     已停止的进程数
     僵尸进程数
  第三行 —— CPU信息
     us &lt;=&gt; user cpu time, CPU time spent in user space
     sy &lt;=&gt; system cpu time, CPU time spent in kernel space
     ni &lt;=&gt; user nice cpu time，CPU time spent on low priority processes
            processes with priority upgrade nice
     id &lt;=&gt; idle cpu time, CPU time spent idle
     wa &lt;=&gt; io wait cpu time, CPU time spent in wait (on disk)
     hi &lt;=&gt; hardware irq, CPU time spent servicing/handling hardware interrupts
     si &lt;=&gt; software irq, CPU time spent servicing/handling software interrupts
     st &lt;=&gt; steal time, CPU time stolen from a virtual machine
  第四行 —— 物理内存
     物理内存总量
     物理内存使用量
     物理内存空闲量
     用于内核缓存的量
  第五行 —— 交换空间，可以使用free命令
     交换空间总量
     交换空间使用量
     交换空间空闲量
     交换空间缓冲总量
</code></pre>

<h2>Task Area</h2>

<pre><code>=============================================================================
PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
2761 nosea     20   0  474m  95m  15m S   11  2.4   5:28.17 chrome 
2042 nosea     20   0  337m 138m  48m S   10  3.5   8:10.84 compiz
3562 nosea     20   0  256m  80m  28m S    8  2.0   2:44.51 chrome 
2288 nosea     20   0  651m 118m  45m R    6  3.0   8:27.07 chrome 
2844 nosea     20   0  409m 222m  40m S    6  5.6   5:51.43 chrome        
...
=============================================================================   
PID: 进程ID
USER: 进程所有者
PR: 优先级
NI: nice值，负数表示高优先级，正数表示低优先级
VIRT: 进程使用的虚拟内存总量
RES: 进程使用的物理内存总量
SHR: 进程使用的共享内存总量
S: 进程状态
   D —— Sleeping(不可中断的睡眠状态)
   R —— Running
   S —— Sleeping
   T —— Traced or stopped
   Z —— Zombie 
%CPU: 进程的CPU时间占比
%MEM: 进程的物理内存占比
TIME+: 进程和其子进程所用CPU时间总和
COMMAND: 进程名或者是开启进程所运行带路径和参数的命令(按C可以展开)
++++++++++下面的是默认不显示的，按f键可以选择需要显示的列++++++++++++++
PPID  = Parent Process Pid
RUSER = Real user name
UID   = User Id
GROUP = Group Name
TTY   = Controlling Tty
P     = Last used cpu (SMP)
SWAP  = Swapped size (kb)
TIME  = CPU Time
CODE  = Code size (kb)
DATA  = Data+Stack size (kb)
nFLT  = Page Fault count
nDRT  = Dirty Pages count
WCHAN = Sleeping in Function
Flags = Task Flags &lt;sched.h&gt;
</code></pre>

<h2>Interactive Commands</h2>

<pre><code>Global Commands
  Enter/Space: 立即刷新
  ?/h: help
  =: 
  A: 4个列组同时显示
  B: 加粗显示
  d/s: 改变刷新时间
  G: 切换列组(1-4显示不同的field)
  I:Irix/Solaris Mode开关
  k: kill一个进程
  q: 退出
  r: 改变一个进程的优先级
  W: 保存当前的top设置
  Z: 改变页面颜色
SUMMARY Area Commands
  l: Load Average/Uptime的显示开关
  m: Memory/Swap Usage的显示开关
  t: Memory/Swap Usage的显示开关
  1: Single/Separate Cpu States的显示开关，如果想看每个CPU的信息的话
TASK Area Commands
  Appearance:  b, x, y, z
  Content:     c, f, H, o, S, u
  Size:        #, i, n
  Sorting:     &lt;, &gt;, F, O, R
COLOR Mapping
  &lt;Ret&gt;, a, B, b, H, M, q, S, T, w, z, 0 - 7
COMMANDS for Windows
  -, _, =, +, A, a, G, g, w
</code></pre>

<h1>Reference</h1>

<p><a href="http://unix.stackexchange.com/questions/18918/in-linux-top-command-what-are-us-sy-ni-id-wa-hi-si-and-st-for-cpu-usage">In Linux “top” command what are us, sy, ni, id, wa, hi, si and st (for CPU usage)?</a>  <br/>
Thanks!</p>
]]></content>
  </entry>
  
</feed>
