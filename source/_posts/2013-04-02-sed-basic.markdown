---
layout: post
title: "Sed Basic"
date: 2013-04-02 14:55
comments: true
categories: Linux
toc: true
---
# Introduction
    sed 基础
<!--more-->
# Content
## OPTION
    -n, --quiet, --silent
	-e 'edit command'
	    eg:
		sed -e 'edit_command1' -e 'edit_command2'... file_to_process
	-f script-file
	-i[SUFFIX], --in-place[=SUFFIX]
	    说明：指定后缀方便保留备份
	    eg:
		$ ls
		data
		$ sed -i.backup -e'1,4s/good/bad/' data
		$ ls
		data  data.backup # data.backup为原数据
## edit command
    1、edit command的格式:
	   [address1[,address2]]function[argument]
	2、地址参数为
	   行数
	   or
	   regexp
	3、function为sed的内定函数，表示执行编辑动作
	4、当地址参数为regexp时，其前后必须加上"/"
	5、当只有一个地址参数时，表示符合地址的参数行才编辑
	   当有address1,address2时，表示对数据区间执行，
	   address1代表起始数据行，address2代表终止数据行
## function	   
	s
	  格式: [address1[,address2]]s/pattern/replacement/[flag]
	  pattern: regexp
	  replacement: 
	              &:  pattern
				  \n:  表示pattern中第n个被\( \)括起来的字符串
				  \: 用来转义
      flag:
	      g             替换所有满足的情况
		  十进制数m     表示替换行内第m个符合的字符串
		  p             表示替换第一个符合pattern的字符串后，将output输出到stdout
		  w wfile       表示替换第一个符合pattern的字符串后，输出到wfile内
	  若没有flag，则将资料行内第一个符合pattern的字符串用replacement替换
	  delimiter:
	            在"/pattern/replacement/[flag]"中，"/"是一个delimiter.
				除了空白(blank),换行符(newline)之外，可以用任何字符作为delimiter.
	d   
	  说明: 删除数据行
	  格式: [address1[,address2]]d
	a
	  说明: 追加文本(Append text)
	  格式: [address]a\Text
	  eg: 
	  $ cat data 
	  1
	  2
	  3
	  4
	  5
	  
	  $ sed '1,3afile' data 
	  1
	  file
	  2
	  file
	  3
	  file
	  4
	  5
	  
	  $ sed '1,2afile\
	  > port\
	  > good' data
	  1
	  file
	  port
	  good
	  2
	  file
	  port
	  good
	  3
	  4
	  5
	  
    i
      说明:这个跟a类似，但是是插入行之前，而不是行之后.
	  注意:要想分行，必须加"\"backslash
	c 
	  说明: 这个是将address的内容change成c后面的内容
	  eg:
	  $ sed '1,2cgood' data   ## 1-2行被换成了good
	  good
	  3
	  4
	  5
	  ## 如果你要每行都换成good，可以这样
	  $ sed '/[0-9]/cgood' data  
	  ## OR
	  $ sed 'cgood' data
	  good
	  good
	  good
	  good
	  good
	p
	  说明: 就是将执行结果送至stdout
	  eg:
	  $ sed  '/[0-9]/p' data 
	  1
	  1
	  2
	  2
	  3
	  3
	  4
	  4
	  5
	  5
	  $ sed -n  '/[0-9]/p' data 
	  1
	  2
	  3
	  4
	  5
	l
	  说明: 将nonprinting字符以ASCII打印出来
	  eg：
	  $ cat data 
	  1    1
	  2
	  3
	  4
	  5

	  $ sed -n  '/[0-9]/l' data 
	  1\t1$
	  2$
	  3$
	  4$
	  5$
	r
	  说明: 就是将文件内的内容append到匹配的行后面
	  eg:
	  $ cat file1 
	  This is a test file
	  only contain two line
	  $ sed '1,3rfile1' data 
	  1
	  This is a test file
	  only contain two line
	  2
	  This is a test file
	  only contain two line
	  3
	  This is a test file
	  only contain two line
	  4
	  5
	w
	  格式: [address1[,address2]]w file
	  说明: 这个是将匹配的内容写file里，注意，file是被清空的
	  eg:
	  $ cat file1 
	  those words will be 
	  overwrite
	  $ sed -n '1,3w file1' data 
	  $ cat file1 
	  1    1
	  2
	  3
	y
	  格式: [address1[ ,address2]]y /xyz.../abc.../
	  说明: 这个是将pattern里的x，y，z换成a，b，c
	  eg:
	  $ cat data 
	  a b c d e f g h
	  1 2 3 4 5 6
	  $ sed 'y/abc/xyz/' data 
	  x y z d e f g h
	  1 2 3 4 5 6
	! 
	  说明: 这个表示不执行函数
	  eg:
	  $ cat data 
	  This is a 1 2 3
	  test 9 45
	  good
	  ok
	  thanks bye
	  $ sed '/[0-9]/!s/^./9/' data  ## 对含有数字的行不执行替换操作
	  This is a 1 2 3
	  test 9 45
	  9ood
	  9k
	  9hanks bye
	n 
	  说明: 表示读pattern的下一行
	  eg:
	  $ cat data 
	  This is a 1 2 3
	  test 9 45
	  good
	  ok
	  thanks bye
	  $ sed -n -e'n' -e 'p' data  ## 打印偶数行
	  test 9 45
	  ok
	q
	  说明: exit sed 
	  eg: 遇到含有两个o的行就退出
	  $ sed -n -e'p' -e'/oo/q' data 
	  This is a 1 2 3
	  test 9 45
	  good
    =
	  说明: 打印行数
	N
	  说明: 这个是将下一行读入patter内并且用newline分隔
	  eg: ## 将第二行与第一行合并
	  $ cat data 
	  1
	  2
	  3
	  4
	  5
	  6
	  7
	  8
	  9
	  10
	  $ sed -e'N' -e's/\n/ /' data 
	  1 2
	  3 4
	  5 6
	  7 8
	  9 10
	D
	  说明: 删除pattern内的第一行资料，当pattern只有一行时，作用与d相同
	p
	  说明: 打印
	h/H
	  说明: Copy/append pattern space to hold space.
	g/G
	  说明: Copy/append hold space to pattern space
	x
	  说明: Exchange the contents of the hold and pattern spaces
	  
# Reference	  
sed Manual    
Thanks!
	
	  
	  
