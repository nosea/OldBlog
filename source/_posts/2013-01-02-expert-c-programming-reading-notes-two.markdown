---
layout: post
title: "《C专家编程》读书笔记(二)"
date: 2013-01-02 20:04
comments: true
categories: C\C++
toc: true
---
# Introduction
    《C专家编程》第二章笔记
<!-- more -->
# 第2章 - 这不是bug，而是语言特性
## 2.1这关语言特性何事
    1.在C语言中，存在一些含糊之处或近似含糊之处
	2.若遇到malloc(strlen(str));，几乎可以断定是错误的，malloc(strlen(str)+1)才是正确的
	3.一个'L'的NUL和两个'LL'的NULL
	  一个'L'的NUL用于结束一个ACSII字符串
	  两个'LL'的NULL用于表示什么也不指向(空指针)
## 2.2多做之过
    "多做之过"，就是语言中存在某些不应该存在的特性。这些特性包括容易出错的switch语句，相邻字符
	串常量自动连接和缺省的全局范围
	1.switch的问题
	  在switch的左花括号之后，可以声明一些变量，从而进行一些局部分配
	  但为这些变量加上初始值没有什么作用，因为它绝不会执行，语句从匹配表达式的case开始
	  -->验证了下，如果在那里初始化变量，VC下时会报错的
	  
	  switch内的标签，比如case num: 如果case写错，比如default: 写成了defauit: 是不会报错的
	  -->VC下验证了下，会给出警告
	  
	  由于C下const关键字并不是真正的常量，所以case后放置const修饰的变量会产生编译错误
	  -->VC下验证，居然没有错，但是如果用普通变量就会显示“case expression not constant”
	  
	  switch语句如果每个case语句后不加break，就会依次执行下去，这个叫“fall through”情况
	  
	  break语句是跳出最近的那层循环语句或者switch语句 - 跟if语句没有关系
	2.ANSI C引入的另一个新特性是相邻的字符串常量将被自动合并成一个字符串的约定
	  以前是要加反斜杠(\)
      printf("aaaa"
		     "bbbb"
		     "cccc");
	  这样后，编译时会自动合并，除了最后一个字符串，其余每个字符串最后末尾的"\0"会被自动删除
	  但是这样的特性如果放在字符串数组初始化时，漏掉逗号时，相邻字符串会合并而且没有任何提示信息
	  char *name[] = {"aaaa" "bbbb", "cccc"};
	  上面的name[1]其实是"aaaabbbb"
	3.太多的缺省可见性
	  定义C函数时，在缺省情况下函数的名字是全局可见的，可以加个extern关键字，效果一样
	  但是如果想限制在文件之外不可见，则必须加static关键字
	  funcition name() /*在任何地方均可见*/ -- 这种缺省的可见性被多次证明是个错误
	  extern funcition name() /*在任何地方均可见*/
	  static funcition name() /*在这个文件之外不可见*/
	  我的确是没有习惯在函数名前面加存储类型说明符的习惯^-^
## 2.3误做之过
    C语言的"误做之过"就是语言中有误导性质或不适当的特性。有些跟c的简洁有关，有些则与操作符的
	优先级有关
	1.许多符号被"重载"而具有好几种意义 - 太简洁
	  static  
	        函数内部，表示该变量的值在各个调用期间一直保持延续性
			函数这一级，表示该函数只对本文件可见
      extern
	        用于函数的定义，表示全局可见(属于冗余的)
			用于变量，表示它在其它地方定义
	  void
	        作为函数的返回类型，表示不返回任何值
			在指针声明中，表示通用指针的类型
			位于参数列表中，表示没有参数
	  *
	        乘法运算符
			用于指针，间接引用
			在声明中，表示指针
	  &
	        位的AND操作符
			取地址操作符
	  ()
	        在函数定义中，包围形式参数表
			调用一个函数
			改变表达式的运算次序
			将值转换为其他类型(强制转换)
			定义带参数的宏
			包围sizeof操作符的操作数(如果它是类型名)
	   -->我觉得简洁也是一种美
    2.有些运算符的优先级是错误的
	  -------------------------------------------------------------------
	  .的优先级高于* ，->操作符用于消除这个问题
	  *p.f其实是 *(p.f)， 而不是(*p).f)
	  -------------------------------------------------------------------
	  []高于*
	  int *ap[] 其实是int *(ap[]) 
	  -------------------------------------------------------------------
	  函数()高于*
	  int *fp() 其实是int *(fp())
	  -------------------------------------------------------------------
	  还有一个关于逗号运算符的，
	    int i = 1, 2;    /*逗号运算符是最右边的值，但是赋值符的优先级更高，所以为1*/
		--> 因此，我觉得为避免出错，多用括号 int i = (1, 2);
	  -->还是不必纠结这个了，凡是有疑虑的，均用括号来解决
	  
	  有的专家建议:
	     在C语言中记牢两个优先级就够了:乘法和除法先于加法和减法，涉及其他的操作符时，一律
		 加上括号。
    3.关于操作符的"结合性" - 在几个操作符具有相同的优先级时决定先执行哪个
	  每个操作符拥有某一级别的优先级，同时也拥有左结合性或右结合性
	  所有赋值符(包括符合赋值)都具有右结合性 - 也就是表达式最右边的操作最先执行
	  具有左结合性的 - 如位操作符&, |
## 2.4少做之过
    属于"少做之过"的特性就是语言应该提供但未能提供的特性
	1.关于空格
	  在多行用反斜杠(\)分割的时候，\后不要加空格，否则会出现错误
	  
	  关于int e = *c/ *d; --> 如果/*连在一起，就是注释了，必要的空格不能少
	  
	  防止这种情况的出现
	  a //*
	  //*/ b     -->就变成a/b了
## 2.5轻松一下————有些特性确实就是bug


