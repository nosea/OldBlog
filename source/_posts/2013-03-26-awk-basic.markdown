---
layout: post
title: "Awk 基础"
date: 2013-03-26 15:09
comments: true
categories: Awk
toc: true
---
# Introduction
    Awk 基础知识
<!--more-->
# 基础知识
## 两个基本概念
    1.记录(record): 一般而言，一个数据行就相当于文件上的一行
	2.字段(Field): 为数据行上被分隔开来的子字符串
	3.两种执行方式:
	  I. $awk 'awk程序' filename
	  II. $awk -f somefile.awk filename
	4.
	  $0 ——  awk所读入的数据行，为一整行字符串
	  $1 —— $0 上第一个字段的数据
	  $2 —— $0 上第二个字段的数据
	  ......
## 常用Options
	-F fs
	    <=> FS
	-v var=val
	    --通常在BEGIN块中设置此类变量
	-f program-file	  
## 常量
    ARGC        命令行参数个数
	ARGV        命令行参数数组
	FILENAME    当前输入文件名
	NF          当前行field个数
	NR          总的record数
	FNR         当前文件record数
	FS          输入field分隔符
	OFS         输出record分隔符
	RS          输入record分隔符
	ORS         输出record分隔符
	--------------------------------------------------
	FS -- 输入field分隔符，默认是space
       -- FS也可以用正则表达式
       -- 当FS为空时
	OFS -- 输出field分隔符，默认space
	  [nosea@nosea test]$ awk -v OFS="|" '{print $0}' to.txt 
	  111 222
	  333 444
	  555 666
	  [nosea@nosea test]$ awk -v OFS="|" '{print $1,$2}' to.txt 
	  111|222
	  333|444
	  555|666
    RS -- 输入record分隔符，默认newline
       -- 也可能是正则表达式
    RT -- 当RS为固定值，RT就是RS的值，
      eg:echo '111 222|333 444|555 666' | awk -v RS='|' '{print $0, RT}'
	  111 222 |
	  333 444 |
	  555 666
      -- 当RS为正则表达式时，RT就是匹配出来的值
      eg:echo '111 222a333 444b555 666' | awk -v RS='[a-z]' '{print $0, RT}' 
	  111 222 a
	  333 444 b
	  555 666
      -- 当RS为空时，即RS=""时，awk会把空白行当成文件中的record分隔符
    ORS -- 输出record分隔符，默认newline
      echo '111 222|333 444|555 666' | awk -v RS='|' -v ORS='@' '{print $0}' 
      111 222@333 444@555 666
      @[nosea@nosea test]$   -- 注意此处有一个@，会多打一个空行！！

## Pattern，Action
    BEGIN{ action }
	    BEGIN为true的时候 -- 程序开始执行，尚未读取任何数据之前
		一般将 "与数据内容无关" 和 "只需执行一次" 的部分放置在这里
		注:
		  执行只含BEGIN{ action }的程序时，awk不会进行任何数据文件处理
	
	END{ action }
	    END为true的时候 -- 程序处理完所有的数据，即将离开程序的时候
	
	/regular expression/{ action }
	  String Match Pattern
	  /regexpr/  <=>  $0 /regexpr/
	  expression ～ /regexpr/
	  expression !~ /regexpr/
	
	relational expression{ action }
	    >  <  >=  <= == !=  ~   !~
	
	Compound pattern{ action }
	    &&   ||  !
	
	pattern ? pattern : pattern{ action }
	
	pattern1, pattern2{ action }
	    当pattern1成立时，switch打开
		当pattern2成立时，switch关闭
		如果两个pattern在同一行都满足，那么swtich在一行里打开后马上关闭
		    如果接下来的行里有满足pattern1的，switch才会打开
## 流程控制
    if、for、while与c语言类似
	next:
	    执行next时，awk会忽略next后的所有指令，接着读取下一笔数据，继续从第一个
		pattern { Action }执行
	exit:
	    执行exit时，awk立刻退出程序
	自定义函数
	function name(parameter-list) {
	    statements
    }
## I/O控制
    打印输出
        print  ---  注意这个会自动添加换行符
	    printf ---  类似C语言，记住这个不自动加换行符
	    print 和 printf之后可以用 ">" 或者 ">>" 重定向到数据文件
	    eg: print "data to print" > "data.txt"
    getline
	    getline var < file  —— 由file读数据，存储在var中
        getline var         —— 由pipe读数据，存储在var中
        getline var         —— 当Pattern为BEGIN或END时，getline将由stdin读取数据，
                               否则由awk正在处理的数据文件上读取数据
        getline一次读取一行数据，若读取成功则返回1，失败为-1，遇到文件结束则为0
		
	awk借助管道与shell命令交互
    awk可接受下列两种语法:
      1、awk output command | "shell command"
         这里awk输出的数据会交给shell命令处理
      2、"shell command" | awk input command
         这里shell命令的输出将会交给awk处理
      ——注
         awk input指令只有getline 一个
         awk output指令有 print，printf()两个

## BUILT-IN FUNCTION
	1.index(str, b)
      若b在str中存在，返回其首次出现位置，否则返回0

	2.length(str)
	  返回str的长度
	  # 如果要计算一个行的长度，即length($0)的时候，记得 nc=length($0)+1, “+1”是因为还有newline

	3.match(str, regxp)
	  寻找在str中匹配regxp表达式的子串，若有多个符合，则以最左方为准
	  RSTART = 满足条件的子串在原串中的位置
	  RLENGTH = 满足条件的子串的长度

	4.split(str, arr, s)
	  awk会根据分隔符s将str分割成一个个field然后以数组arr记录每个field

	5.sprintf(str, opt1, opt2)
	  功能与printf相同，不同是将打印的结果当成一个字符串返回而不是打印到屏幕

	5.sub(regexp, rstr, sourcestr)
	  sub()将原字符串中第一个合乎指定的regexp的子串用rstr替代
	  通过sub()与match()的搭配使用，可逐次取出原串中合乎指定条件的所有子串

	6.gsub(regexp, rstr, sourcestr)
	  功能和sub一样，区别是：
	  gsub()会取代所有满足条件的的子串
	  gsub()会返回被替换子串的个数

	7.substr(str, begin, len)
	  返回从begin位置起，指定len长度的子串，若未指定len，返回整个str
## Regular Expressions
    1、metacharacters
	  \ ^ $ . [ ] | ( ) * + ?
	  
	  ^        match开头
	  $        match尾部
	  .        match任何单个字符
	  [abc]    match字符a，b，c中的任何一个
	           注意: 在[]里的字符，除了"\", 开头的"^"，以及两个字符间的"-"
			   都代表其字符意义，即[.]就匹配一个"."，而不是任意单个字符
			   hyphen: "-", 仅在两边都有字符的时候，才代表连续字符集的简写，否则就是其字面意思
	  combine
	  A|B      match A或者B
	  AB       match A紧接着是B
	  A*       0个或多个A
	  A+       1一个多个A
	  A？      null string 或者 A, 即要么没有，要么只有一个
	  (r)      等同表达式r， 好处是可以对整个()里的内容用*, + 等之类的
	           (r1)(r2)匹配xy，其中x match r1， y match r2
	  
	  匹配确定个数
	  $ echo "aaaaaa|aa dd|dd aaaa" | awk -v RS="|" --posix '/a{6}/{print NR, $0}'
	  1 aaaaaa
	  
	  ~        匹配
	  !~       不匹配
	  如果不小心写成了 ~!  
	  比如 $0~!/re/, 那么只有可能是$0 ~ 1, 或者 $0 ~ 0, 但是0还是1由/re/来确定
	2.例子
	  /^[0-9]+$/
	      匹配只含有数字的行
	  /^[0-9][0-9][0-9]$/
	      匹配只有三个数字的行
	  /^(\+|-)?[0-9]+\.?[0-9]*$/
	      匹配带可选正负号的十进制数
	  /^[+-]?[0-9][.]?[0-9]*$/
	      同上一条
	  /^[A-Za-z][A-Za-z0-9]*$/   # 在ASCII中，a > A
	      匹配一个字母后面接一个字母或者数字或者不接
## 备忘
    1.在使用print打印的时候，用逗号分隔，默认打印出来是被空格分隔
	  eg:
	  awk '{print $1, $3}' log.data  # 如果不加逗号，就连在一起
	  tomy 2
	  simy 2
	2.$ 之后是可以跟表达式的
	  eg: 打印第一个field 和最后一个field
	  awk '{print $1, $NF}'
	3.A missing pattern matches every input line
	  A pattern-action consisting only a pattern prints each input line
	  matched by pattern.
	  print本身代表打印当前行
	  { print } <=> { print $0 }
    4.因为action和pattern都是可选的，所以actions要放在{}里以区别pattern
	5.BEGIN match的是before the first line of first file is read
	  END match的是after the last line of last file  has been processed
	6.分号";" 和 newline 都可以分割statement
	7.awk的变量无需初始化，初次用值为0或null string
	8.字符串连接
	  name = name $1 " "
	9.pattern和"{" 必须紧挨
	10.长语句可以用backslash"\"分隔多行
	11.在BEGIN和END里，没有NR，但有NF，$0, $1....(如果指定了$0)
	12.sub只替换满足条件的第一个，gsub是替换一行里所有满足条件的
	13.字符串作为正则表达式
	    BEGIN {digits = "^[0-9]+$"}
		$2 ~ digits
	14.注意以下的区别
	   $0 ~ /(\+|-)[0-9]+/
	   and
	   $0 ~ "(\\+|-)[0-9]+"
	15.gsub(/a/, "&b&", "banana")   # 把每个a替换成aba
	16.exit如果后面没有跟退出状态，那么退出状态是0
	17.string作为regexp
	   BEGIN {digit = "^[0-9]+$"}
	   $1 ~ digit
	   NOTE：
	     "^[0-9]+$" <=> /^[0-9]+$/
		 "(\\+|-)][0-9]+"  <=>  /(\+|-)[0-9]+/
# Reference
Awk 手册     
The Awk Programming Language    
Thanks!
